version: "3.8"
services:
  db:
    image: postgres:15-alpine
    container_name: postgres_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    networks:
      - backend_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vue_frontend
    ports:
      - "3000:3000"
    networks:
      - frontend_network
    depends_on:
      - backend_central
    environment:
      VUE_APP_API_URL: "http://localhost:8080"

  backend_central:
    build:
      context: ./Go-Backend
      dockerfile: Dockerfile
    container_name: go_backend_central
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: mydatabase
      APP_PORT: 8080
    ports:
      - "8080:8080"
    networks:
      - backend_network
    volumes:
      - ./Go-Backend/entrypoint.sh:/entrypoint.sh
    command: ["/entrypoint.sh"]

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_container
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"  # Puerto AMQP
      - "15672:15672"  # Puerto para la interfaz de gesti√≥n
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend_node1:
    build:
      context: ./Go-Back-Nodo1
      dockerfile: Dockerfile
    container_name: node_backend1
    depends_on:
      db_node1:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_HOST: db_node1
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: node_database1
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      PORT: 8081
    ports:
      - "8081:8081"
    networks:
      - backend_network
    volumes:
      - ./Go-Back-Nodo1/entrypoint.sh:/entrypoint.sh
    command: ["/entrypoint.sh"]

  backend_node2:
    build:
      context: ./Go-Back-Nodo1
      dockerfile: Dockerfile
    container_name: node_backend2
    depends_on:
      db_node2:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_HOST: db_node2
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: node_database2
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      PORT: 8082
    ports:
      - "8082:8082"
    networks:
      - backend_network
    volumes:
      - ./Go-Back-Nodo1/entrypoint.sh:/entrypoint.sh
    command: ["/entrypoint.sh"]

  backend_node3:
    build:
      context: ./Go-Back-Nodo1
      dockerfile: Dockerfile
    container_name: node_backend3
    depends_on:
      db_node3:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      DB_HOST: db_node3
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_NAME: node_database3
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      PORT: 8083
    ports:
      - "8083:8083"
    networks:
      - backend_network
    volumes:
      - ./Go-Back-Nodo1/entrypoint.sh:/entrypoint.sh
    command: ["/entrypoint.sh"]

  db_node1:
    image: postgres:15-alpine
    container_name: postgres_node1_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: node_database1
    ports:
      - "5434:5432"
    networks:
      - backend_network
    volumes:
      - postgres_node1_data:/var/lib/postgresql/data
      - ./init_nodo_1.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  db_node2:
    image: postgres:15-alpine
    container_name: postgres_node2_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: node_database2
    ports:
      - "5435:5432"
    networks:
      - backend_network
    volumes:
      - postgres_node2_data:/var/lib/postgresql/data
      - ./init_nodo_2.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  db_node3:
    image: postgres:15-alpine
    container_name: postgres_node3_container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: node_database3
    ports:
      - "5436:5432"
    networks:
      - backend_network
    volumes:
      - postgres_node3_data:/var/lib/postgresql/data
      - ./init_nodo_3.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  postgres_node1_data:
  postgres_node2_data:
  postgres_node3_data:

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
